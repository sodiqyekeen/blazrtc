@page "/"
@implements IAsyncDisposable

@inject IMediaDeviceService MediaDeviceService

<PageTitle>Index</PageTitle>

<h1>Connected Media Device</h1>


@foreach (var device in devices)
{
    <div>@device.Label : @device.Kind</div>
}
<button @onclick="StartMediaCapture">Start Capture</button>
@if (localStreamId != null)
{
    <button @onclick="ToggleVideo">Toggle Video</button>
    <button @onclick="StopMediaCaptureAsync">Stop Capture</button>
}
<video id="preview" autoplay muted></video>


@code {
    List<MediaDeviceInfo> devices = new List<MediaDeviceInfo>();
    string? localStreamId = null;

    protected override async Task OnInitializedAsync()
    {
        devices = (await MediaDeviceService.GetMediaDevicesAsync()).ToList();
        MediaDeviceService.OnVideoStreamAvailable += OnStreamAvailable;
    }

    private void OnStreamAvailable(string streamId)
    {
        this.localStreamId = streamId;
        Console.WriteLine("Stream Available" + streamId);
        StateHasChanged();
    }
    private async Task StartMediaCapture()
    {
        var options = MediaCaptureOptions.Create()
        .WithAudioEnabled()
        .WithVideoEnabled()
        .WithPreviewStream("preview");

        await MediaDeviceService.StartMediaCaptureAsync(options);

    }

    private async Task ToggleVideo()
    {
        if (localStreamId != null)
            await MediaDeviceService.ToggleVideoTrackAsync();
    }

    private async Task StopMediaCaptureAsync()
    {
        await MediaDeviceService.StopMediaCaptureAsync();
        localStreamId = null;
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        await StopMediaCaptureAsync();
        MediaDeviceService.OnVideoStreamAvailable -= OnStreamAvailable;
    }
}